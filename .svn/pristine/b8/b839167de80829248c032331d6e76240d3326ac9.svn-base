<?php/** * Created by PhpStorm. * User: admin * Date: 2017/12/7 * Time: 0:16 */namespace app\api\controller;use app\common\controller\ApiBase;class User extends  ApiBase{//    const __OK__ = '0'; //请求成功//    const __ERROR__ = '1'; //参数错误//    const __ERROR1__ = '2'; //没有绑定//    const __ERROR2__ = '3';//数据库错误//    private $array_return=array("ResultType"=>1,"Message"=>"success","AppendData"=>[]);//    private  $request;//    private  $userInfo;    public function _initialize()    {        parent::_initialize();        require_once VENDOR_PATH.'/Weixin/class.wx_sdk_handler.php';//引入微信Api        require_once VENDOR_PATH.'/Weixin/class.wx_network.php'; //引入微信配置文件        require_once VENDOR_PATH.'/Weixin/class.wx_open_api.php';        require_once VENDOR_PATH.'/Weixin/interface.wx_database.php';        // 初始化SDK        $opt = array(            'app_id' => XCX_APP_ID,            'app_secret' => XCX_APP_SECRET,            'rsa_private_key' => XCX_RSA_PRIVATE_KEY,            'salt' => XCX_SALT,            'database' => $this->db,            'delegate' => $this        );        $this->sdk = new \WXSDKHandler($opt);        if($_SERVER['REQUEST_METHOD']=='PUT')        {            $input=json_decode(file_get_contents('php://input'));            if($input)            {                $this->request=$this->object_array($input);            }        }else {            $this->request = Request::param();        }        $actionName = strtolower(ACTION_NAME);        $noLogin=array('loginbind','getopenid','getcode','updatewxheader','getusershare','getareas','registnobuy','share','getmy','bindgetcode','getviplist');        if(!in_array($actionName,$noLogin))        {            if($this->request['spopenid']) {                $this->userInfo=D("Api/User",'Logic')->getUserInfoOption(array('spopenid'=>$this->request['spopenid']));            }else if($this->request['unionid']){                $this->userInfo = Db::table('s_user_info')->where(array('unionid'=>$this->request['unionid']))->find();            }else{                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="非法访问";                $this->array_return['data']=null;                return json($this->array_return);            }            if(!$this->userInfo)            {                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="没有该用户或登录失败";                $this->array_return['data']=null;                return json($this->array_return);            }else{                $this->request['userInfo']=$this->userInfo;                $level=D('Api/User','Logic')->getVipLevl($this->userInfo['member_id']);                if($level['vip_group_id']<=0 && !in_array($actionName,array('newviporder','logout')))                {                    $this->array_return['ResultType']=self::__ERROR2__;//ERROR2，没有充值                    $this->array_return['Message']="您的账号尚未开通创客服务!";                    return json($this->array_return);                }            }        }    }    /**     * 控制小程序     */    public function xcx_show()    {        $array = array(            'luck'=>false,            'pay_card'=>false        );        $this->array_return['AppendData']=$array;        $this->array_return['ResultType']=self::__OK__;        $this->array_return['Message']="显示";        return json($this->array_return);    }    /**     * 获取用户的OPENID     *     */    public function GetOpenId()    {        $result= $this->sdk->GetOpenId();        return json($result);    }    // 个人信息接口    public function GetMy()    {        $res=$this->request;        //接口切换用unionid调数据        if($res['unionid']){            $res['wx_id'] = $this->userInfo = Db::table('s_user_info')->where(array('unionid'=>$this->request['unionid']))->getField('id');        }        if(!is_numeric($res['res_id'])){            $res['res_id'] = $this->userInfo = Db::table('s_user_info')->where(array('unionid'=>$res['res_id']))->getField('id');        }        if(!$res['name'] && !$res['wx_id'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="参数错误";        }else{            // 判断是否本人调数据            if($res['name']= = $res['spopenid'] || $res['wx_id'] == $res['res_id'])            {                $res['isMy']=true;            }            $data=D("Api/User",'Logic')->xcxlogin($res);            if($data){                $this->array_return['AppendData']=$data;                $this->array_return['ResultType']=self::__OK__;                $this->array_return['Message']="获取成功";            }else{                $this->array_return['ResultType']=self::__ERROR1__;                $this->array_return['Message']="用户不存在或未绑定";            }        }                return json($this->array_return);    }    public function LoginBind()    {        $res=$this->request;        //判断参数        if(!$res['mobile'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有手机号";            return json($this->array_return);        }else{            $res['phone'] = $res['mobile'];        }        if(!$res['openid'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有用户微信授权";            return json($this->array_return);        }        if(!$res['password'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有密码";            return json($this->array_return);        }        $member=D("Api/Member",'Logic')->isExist(array('phone'=>$res['phone']));        if(!$member)        {            $this->array_return['ResultType']=self::__ERROR1__;//ERROR1，需要注册用户            $this->array_return['Message']="没有找到用户！";            return json($this->array_return);        }        $member=D("Api/Member",'Logic')->isExist(array('phone'=>$res['mobile'],'password'=>md5($res['password'])));        if(!$member)        {            $this->array_return['ResultType']=self::__ERROR2__;//ERROR2，没有充值            $this->array_return['Message']="密码错误！";            return json($this->array_return);        }        $res1=D("Api/User",'Logic')->updateXcxOpenid(array('id'=>$member['id'],'openid'=>$res['openid']));        if($res1)        {            $this->array_return['ResultType']=self::__OK__;//ERROR2，没有充值            $this->array_return['Message']="绑定成功！";            return json($this->array_return);        }        $this->array_return['ResultType']=self::__ERROR2__;//ERROR2，没有充值        $this->array_return['Message']="更新数据时失败！";        return json($this->array_return);    }    public  function GetCode()    {        $res=$this->request;        if(!$res['mobile'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有手机号";            return json($this->array_return);        }else{            $res['phone'] = $res['mobile'];            $res['type']=1;        }        $data=D("Api/Member",'Logic')->SendUserPinCode($res);        if($data['status']==1)        {           $this->array_return['AppendData']=$data;           $this->array_return['ResultType']=self::__OK__;           $this->array_return['Message']="获取成功";        }else{           $this->array_return['AppendData']=$data;           $this->array_return['ResultType']=self::__ERROR__;           $this->array_return['Message']=$data['msg'];        }        return json($this->array_return);    }    public  function BindGetCode()    {        $res=$this->request;        if(!$res['mobile'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有手机号";            return json($this->array_return);        }else {            $isexist=D("Api/Member",'Logic')->isExist(array('phone'=>$res['mobile']));            if($isexist)            {                $res['phone'] = $res['mobile'];                $res['type']=1;            }else{                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="非注册用户不能获取验证码";                return json($this->array_return);            }        }        $data=D("Api/Member",'Logic')->SendUserPinCode($res);        if($data['status']==1)        {            $this->array_return['AppendData']=$data;            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取成功";        } else {            $this->array_return['AppendData']=$data;            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']=$data['msg'];        }                return json($this->array_return);    }    public function UpdateWxHeader() //登录    {        $this->array_return['ResultType']=self::__OK__;        $this->array_return['Message']="";        $this->array_return['AppendData']=null;        return json($this->array_return);    }    public function GetUserShare()    {        $openid=trim(input('name'));        $recreate=$this->request['recreate'];        if(!$openid)        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有用户微信授权";            return json($this->array_return);        }        if(!$recreate)        {            $recreate=0;        }        $res=D('Api/User','Logic')->GetOrCreateShareImg($openid,$recreate);        if($res)        {            $this->array_return['AppendData']=$res;            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取成功";            return json($this->array_return);        }else{            $this->array_return['AppendData']=null;            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="产生未知错误";            return json($this->array_return);        }    }    public function GetMenu()    {        //判断参数        if(!$this->request['id'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="参数错误";            return json($this->array_return);        }        $res=D('Api/User','Logic')->getUsersNav($this->userInfo['id'],$this->request['id']);        if(!$res)        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="菜单为空";            $this->array_return['AppendData']=null;        }else{            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取菜单成功";            $this->array_return['AppendData']=$res;        }        return json($this->array_return);    }    public function EditMenu()    {        //判断参数        $this->request['user_id']=$this->userInfo['id'];        if(!$this->request['name']||$this->request['name']==''||is_null($this->request['name']))        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="导航名称和文本不能为空！";            return json($this->array_return);        }        $res=D('Api/User','Logic')->addUsersNav($this->request);        if(!$res)        {            $this->array_return['ResultType']=self::__ERROR__;            if($this->request['id'])            {                $this->array_return['Message']="更新菜单失败！";            }else{                $this->array_return['Message']="添加菜单失败！";            }            $this->array_return['AppendData']=null;        }else{            $this->array_return['ResultType']=self::__OK__;            if($this->request['id'])            {                $this->array_return['Message']="更新菜单成功！";            }else{                $this->array_return['Message']="添加菜单成功！";            }            $this->array_return['AppendData']=$res;        }        return json($this->array_return);    }    public  function GetAreas()    {        $res=D('Api/User','Logic')->GetAreas($this->request);        if(!$res)        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="获取城市失败！";            $this->array_return['AppendData']=null;        }else{            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取城市成功！";            $this->array_return['AppendData']=$res;        }        return json($this->array_return);    }    //TODO:此方法为小程序和APP共用接口，还需要开发公众号前端要调用的接口    public function EditContentXcx()    {        //判断参数        $this->request['user_id']=$this->userInfo['id'];        $res=D('Api/User','Logic')->addUsersContentXcx($this->request);        if(!$res)        {            $this->array_return['ResultType']=self::__ERROR__;            if($this->request['id'])            {                $this->array_return['Message']="更新内容失败！";            }else{                $this->array_return['Message']="添加内容失败！";            }            $this->array_return['AppendData']=null;        }else{            $this->array_return['ResultType']=self::__OK__;            if($this->request['id'])            {                $this->array_return['Message']="更新内容成功！";            }else{                $this->array_return['Message']="添加内容成功！";            }            $this->array_return['AppendData']=$res;        }        return json($this->array_return);    }    public function GetContentXcx()    {        //判断参数        if(!$this->request['id'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="参数错误";            return json($this->array_return);        }        $res=D('Api/User','Logic')->getUsersContentXcx($this->userInfo['id'],$this->request['id']);        if(!$res)        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有找到该内容";            $this->array_return['AppendData']=null;        }else{            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取内容成功";            $this->array_return['AppendData']=$res;        }        return json($this->array_return);    }    /**     * 更新我的V网     */    public function UpdateMycard()    {        $this->request['userInfo']=$this->userInfo;        $res=D('Api/User','Logic')->SaveMyCard($this->request);        if(!$res)        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="保存微网失败";            $this->array_return['AppendData']=null;        }else{            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="保存微网成功";            $this->array_return['AppendData']=$res;        }        return json($this->array_return);    }    /**     * 通过手机号和验证码注册：注册时的第一步，通过手机号和验证码注册完成，但是尚未购买变成vip用户地址     */    public function RegistNoBuy()    {        //判断是否有spopenid        if(!$this->request['spopenid'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="缺少重要参数";            return json($this->array_return);        }        //判断是否有推荐人spopenid        if(!$this->request['user_no'] && !$this->request['user_id'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有推荐人标识";            return json($this->array_return);        }else{            //获取推荐人Uid            if($this->request['user_no']){                $recordUser=D("Api/User",'Logic')->getUserInfoOption(array('spopenid'=>$this->request['user_no']));            }else{                $recordUser = Db::table('s_user_info')->find($this->request['user_id']);            }            //判断推荐人UID            if(!$recordUser){                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="没有该推荐人！";                return json($this->array_return);            }else{                $this->request['recordUser']=$recordUser;            }        }        //判断是否有手机号        if(empty($this->request['mobile'])||!preg_match("/^1[34578]{1}\d{9}$/",$this->request['mobile'])){            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="手机号码格式错误！";            return json($this->array_return);        }else{            //判断验证码            if(!$this->request['code'])            {                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="没有验证码";                return json($this->array_return);            }else{                $checked=D("Api/Member",'Logic')->CheckUserPinCode(array('phone'=>$this->request['mobile'],'type'=>1,'code'=>$this->request['code']));                if(!$checked){                    $this->array_return['ResultType']=self::__ERROR__;                    $this->array_return['Message']="验证码错误！";                    return json($this->array_return);                }            }        }                $res=D('Api/User','Logic')->xcx_register($this->request);        switch ($res['status'])////0、成功  1，己存在,2：没有传openid，没有授权,3、添加meber失败,4、添加用户失败 其它数值 是新增加的userid,5：没有推荐人            {        	case 0:        		$this->array_return['ResultType']=self::__OK__;          		$this->array_return['Message']="注册成功";        		$this->array_return['AppendData'] = $res['id'];        		break;        	case 1:         		$this->array_return['ResultType']=self::__ERROR__;         		$this->array_return['Message']="己存在该用户";        		$this->array_return['AppendData']=null;        		break;         	case 2:        		$this->array_return['ResultType']=self::__ERROR__;        		$this->array_return['Message']="没有授权小程序";         		$this->array_return['AppendData']=null;           		break;            	case 3:            		$this->array_return['ResultType']=self::__ERROR__;        		$this->array_return['Message']="添加会员信息失败";        		$this->array_return['AppendData']=null;          		break;          	case 4:            		$this->array_return['ResultType']=self::__ERROR__;            		$this->array_return['Message']="添加用户信息失败";           		$this->array_return['AppendData']=null;           		break;        	case 5:        		$this->array_return['ResultType']=self::__ERROR__;        		$this->array_return['Message']="获取推荐人信息失败";        		$this->array_return['AppendData']=null;        		break;        }        return json($this->array_return);    }    /**     * 获取用于小程序显示VIP列表和推荐人信息的购买页面     */    public  function  getVipList()    {        $viplist= D("Api/VipList",'Logic')->getVipList();        $newUser=D("Api/User",'Logic')->getUserInfoOption(array('spopenid'=>$this->request['spopenid']));        if(empty($newUser))        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="必须通过推荐人注册";            $this->array_return['AppendData']=null;            return json($this->array_return);        }        $recordUser=D("Api/User",'Logic')->getUserInfoOption(array('id'=>$newUser['rec_user_id']));        if(empty($recordUser))        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="推荐人错误，请联系技术人员重新注册!";            $this->array_return['AppendData']=null;            return json($this->array_return);        }        if($viplist&&$recordUser)        {            $result['viplist']=$viplist;            $result['recordUser']=$recordUser;            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取服务列表成功";            $this->array_return['AppendData']=$result;        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="获取服务列表失败";            $this->array_return['AppendData']=null;        }        return json($this->array_return);    }    /**     * 生成新的订单和支付信息     */    public  function  newVipOrder()    {        $this->request['user']=$this->userInfo;        if(!$this->request['vip_id'])        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有选择合适的产品";            return json($this->array_return);        }else {            $vip=D("Api/VipList")->where(array("id"=>$this->request['vip_id']))->find();            if(!empty($vip))            {                $this->request['vip']=$vip;            }else {                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="没有选择合适的产品";                return json($this->array_return);            }        }                    $this->request['pay_source']='小程序';        $payinfo=D("Api/User",'Logic')->XcxBuyVip($this->request);        if($payinfo)        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="生成支付信息成功";            $this->array_return['AppendData']=$payinfo['obj']['pra'];        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="生成支付信息失败";            $this->array_return['AppendData']=null;        }                return json($this->array_return);    }    /**     * 小程序年费接口     */    public  function  yearOrder()    {        $this->request['user']=$this->userInfo;        $payinfo=D("Api/User",'Logic')->XcxBuyYear($this->request);        if($payinfo)        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="生成支付信息成功";            $this->array_return['AppendData']=$payinfo['obj']['pra'];        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="生成支付信息失败";            $this->array_return['AppendData']=null;        }                return json($this->array_return);    }    public function ChangePassword()    {        $id   = $this->userInfo['id'];        //TODO::完全用Logic来调用        $memberId = Db::table('s_user_info')->where(array('id'=>$id))->getField("member_id");        $password = Db::table('s_member')->where(array('id'=>$memberId))->getField('password');        $oldpwd   = md5($this->request['oldpwd']);        if($password != $oldpwd){            $this->array_return['ResultType']=$this::__ERROR__;            $this->array_return['Message']="原密码有误";        }else{            if($this->request['password1']!=$this->request['password2'] || empty($this->request['password1']) || empty($this->request['password2'])){                $this->array_return['ResultType']=$this::__ERROR__;                $this->array_return['Message']="新密码不一致或为空";            }else{                $res = Db::table('s_member')->where(array('id'=>$memberId))->save(array('password'=>md5($this->request['password2'])));//更新                if($res){                    $this->array_return['ResultType']=$this::__OK__;                    $this->array_return['Message']="修改成功";                }else{                    $this->array_return['ResultType']=$this::__ERROR__;                    $this->array_return['Message']="修改失败";                }            }        }        return json($this->array_return);    }    /**     * 收藏列表     */    public function collection()    {        $list=D('Api/cards','Logic')->getCollectionData($this->userInfo['id']);        $list['user_no']=D("Api/Member")->where('id='.$this->userInfo['member_id'])->getField('user_no');        $list['vip_name']=D("Api/VipGroup")->where('id='.$this->userInfo['vip_group_id'])->getField('vip_name');        if(!empty($list))        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取收藏列表成功";            $this->array_return['AppendData']=$list;        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="获取收藏列表失败";            $this->array_return['AppendData']=null;        }        return json($this->array_return);    }    /**     * 收藏删除     */    public function del_collection()    {        $object_id = $this->request['object_id'];        if($object_id){            $res = Db::table('s_collection')->where(array('user_id'=>$this->userInfo['id'],'object_id'=>$object_id))->delete();            if($res){                $this->array_return['ResultType']=self::__OK__;                $this->array_return['Message']="删除成功";            }else {                $this->array_return['ResultType'] = self::__ERROR2__;                $this->array_return['Message'] = "删除失败";            }        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="缺少参数";        }        return json($this->array_return);    }    /**     * 收藏备注     * */    public function bei_collection()    {        $object_id = $this->request['object_id'];        $name = $this->request['name'];        if(isset($object_id) && isset($name)){            $res = Db::table('s_collection')->where(array('user_id'=>$this->userInfo['id'],'object_id'=>$object_id))->save(array('name'=>$name));            if($res){                $this->array_return['ResultType']=self::__OK__;                $this->array_return['Message']="操作成功";            }else {                $this->array_return['ResultType'] = self::__ERROR2__;                $this->array_return['Message'] = "操作失败";            }        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="缺少参数";        }        return json($this->array_return);    }    /**     * 留言列表     */    public function myMessage()    {        if($this->request['user_id'] >0 && $this->request['user_id']!=$this->userInfo['id']){// 给别人的留言            $where = array('b.object_id'=>$this->userInfo['id'],'b.user_id'=>$this->request['user_id']);        }else {            // 别人给我的留言            $where = array('b.user_id'=>$this->userInfo['id']);        }        $list = Db::table('s_blog')->alias('b')->join('left join s_user_info u on u.id = b.object_id')                ->field('b.id,u.nick_name,b.add_time,b.content,b.is_read,u.headimg')                ->order('b.add_time desc')->where($where)->select();                        foreach ($list as $k=>$v){            $list[$k]['add_time'] = date("Y-m-d H:i",$v['add_time']);        }        if(!empty($list))        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取留言列表成功";            $this->array_return['AppendData']=$list;        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="获取留言列表失败";            $this->array_return['AppendData']=null;        }        return json($this->array_return);    }    /**     * 留言详情     */    public function messageInfo()    {        $model = Db::table('s_blog');        if($this->request['user_id'] == $this->userInfo['id']){            $model->where(array('id'=>$this->request['msg_id']))->save(array('is_read'=>1));        }        $list = $model->alias('b')                ->join('left join s_user_info u on u.id = b.object_id')                ->join('left join s_member m on m.id = u.member_id')                ->field('b.id,u.nick_name,b.add_time,b.content,m.phone')                ->where(array('b.id'=>$this->request['msg_id']))->select();        foreach ($list as $k=>$v){            $list[$k]['add_time'] = date("Y-m-d H:i",$v['add_time']);        }        if(!empty($list))        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取留言详情成功";            $this->array_return['AppendData']=$list;        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="获取留言详情失败";            $this->array_return['AppendData']=null;        }        return json($this->array_return);    }    /**     * 添加留言     */    public function addMessage()    {        $user_id = $this->request['user_id'];//被留言的人        $content = $this->request['content'];//内容        if($user_id && $content){           $list = D("Api/User","Logic")->addBlog($user_id,$this->userInfo['id'],$content);            if($list)            {                $this->array_return['ResultType']=self::__OK__;                $this->array_return['Message']="添加成功";            }else{                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="添加失败";            }        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="缺少参数";        }        return json($this->array_return);    }    /**     *  删除     */    public function msgDelete()    {        if($this->request['msg_id']){            $list = Db::table('s_blog')->where(array('id'=>$this->request['msg_id']))->delete();            if($list)            {                $this->array_return['ResultType']=self::__OK__;                $this->array_return['Message']="删除成功";            }else{                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="删除失败";            }        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="缺少参数";        }        return json($this->array_return);    }    /**     *  标记已读     */    public function msgRead()    {        if($this->request['msg_id']){            $list = Db::table('s_blog')->where(array('id'=>$this->request['msg_id']))->save(array('is_read'=>1));            if($list)            {                $this->array_return['ResultType']=self::__OK__;                $this->array_return['Message']="标记已读";            }else{                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="操作失败";            }        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="缺少参数";        }                return json($this->array_return);    }    public function MyFriends()    {        $where = $this->request;        $where['user_id'] = $this->userInfo['id'];        $list = D("Api/Cards",'Logic')->getCards($where);        if(!empty($list))        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="获取网夹列表成功";            $this->array_return['AppendData']=$list;        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="获取网夹列表失败";            $this->array_return['AppendData']=null;        }                return json($this->array_return);    }        public function DeleteMyFriends()    {        $where = $this->request;        if(!isset($this->request['id']))        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有选择要删除的朋友！";            return json($this->array_return);        }else{            $where['id']=$this->request['id'];        }        //$where['user_id'] = $this->userInfo['id'];        //TODO:删除朋友时没有加userid条件，删除朋友条件中除了要有ID，还应该有user_id        $result =D("Api/Cards",'Logic')->delCards($where);        if(!empty($result))        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="删除朋友成功";            $this->array_return['AppendData']=$result;        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="删除朋友失败";            $this->array_return['AppendData']=null;        }                return json($this->array_return);    }    public function ViewMyFriend()    {        $where = $this->request;        if(!isset($this->request['id']))        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有选择要查看的朋友！";            return json($this->array_return);        }else{            $where['id']=$this->request['id'];        }        //$where['user_id'] = $this->userInfo['id'];        //TODO:删除朋友时没有加userid条件，查看朋友条件中除了要有ID，还应该有user_id        $result =D("Api/Cards",'Logic')->getCardsInfo($where);        if(!empty($result))        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="查看朋友成功";            $this->array_return['AppendData']=$result;            //‌‌$payinfo['obj']['pra']        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="获取朋友资料失败";            $this->array_return['AppendData']=null;        }        return json($this->array_return);    }    public function AddTrading()    {        $data=array();        $data['user_id']=$this->userInfo['id'];        if(!isset($this->request['tradId']))        {            $object_id = Db::table('s_user_info')->where(array('unionid'=>$this->request['object_unionid']))->getField('id');            if(!$object_id){                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="要交换V网的朋友的资料没有找到！";                return json($this->array_return);            }            $data['object_id']=$object_id;        }else        {            $object_user=D("Api/User",'Logic')->getUserInfoOption(array('spopenid'=>$this->request['tradId']));            if(empty($object_user))            {                $this->array_return['ResultType']=self::__ERROR__;                $this->array_return['Message']="要交换V网的朋友的资料没有找到！";                return json($this->array_return);            }            $data['object_id']=$object_user['id'];        }        $result = Db::table('s_collection')->where(array('user_id'=>$this->userInfo['id'],'object_id'=>$data['object_id']))->getField('id');        if(!$result){            $result=D('Api/Cards','Logic')->addCollection($this->userInfo['id'],$data['object_id'],1);        }        if($result){//通过分享            if($this->request['notice'])            {                $data['msg']=$this->request['notice'];                $result1=D('Api/Cards','Logic')->applyCards($data);                if($result1){                    $this->array_return['Message']='交换V网成功！';                    $this->array_return['ResultType']=self::__OK__;                }else{                    $this->array_return['Message']='请勿重复添加！';                    $this->array_return['ResultType']=self::__ERROR__;                }            }else {                $this->array_return['Message']='加入收藏成功！';                $this->array_return['ResultType']=self::__OK__;            }        }else{            $this->array_return['Message']='操作失败';            $this->array_return['ResultType']=self::__ERROR__;        }                return json($this->array_return);    }    public function DeleteMenu()    {        $where = $this->request;        if(!isset($this->request['id']))        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有选择要删除的菜单！";            return json($this->array_return);        }else{            $where['id']=$this->request['id'];        }        $result =D("Api/User",'Logic')->ApiDelUsersNav($where);        if(!empty($result))        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="删除菜单成功";            $this->array_return['AppendData']=$result;        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="删除菜单失败";            $this->array_return['AppendData']=null;        }        return json($this->array_return);    }    public function DeleteContent()	{        $where = $this->request;        if(!isset($this->request['id']))		{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有选择要删除的内容！";            return json($this->array_return);        }else{            $where['id']=$this->request['id'];        }        $result =D("Api/User",'Logic')->ApiDelUsersContent($where);        if(!empty($result))        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="删除内容成功";            $this->array_return['AppendData']=$result;        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="删除内容失败";            $this->array_return['AppendData']=null;        }        return json($this->array_return);    }    public function Share()    {        $openid=trim(input('name'));        $recreate=$this->request['recreate'];        if(!$openid)        {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="没有用户微信授权";            return json($this->array_return);        }        if(!$recreate)        {            $recreate=0;        }        $res=D('Api/User','Logic')->GetOrCreateShareImg($openid,$recreate);        $this->assign('img',$res);        $this->display("Home@Card:myEwm");    }    /**     * 退出     */    public function Logout()    {        $a= Db::table('s_user_info')->save(array('id'=>$this->userInfo['id'],'is_quit'=>1,'spopenid'=>''));        $b = Db::table('s_member')->where(array('id'=>$this->userInfo['member_id']))->save(array('spopenid'=>''));        if($a!==false && $b!==false)        {            $this->array_return['ResultType']=self::__OK__;            $this->array_return['Message']="解绑成功";            return json($this->array_return);        }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="解绑失败";            return json($this->array_return);        }    }	    /**    * 更新地理位置    */    public function uptLocation()    {	   $latitude = isset($_POST['latitude']) ? $_POST['latitude'] : 0;	   $longitude = isset($_POST['longitude']) ? $_POST['longitude'] : 0;	   if(!$latitude || !$longitude)	   {            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="缺少参数";            return json($this->array_return);	   }	          $res = Db::table('s_user_info')->where(array('id'=>$this->userInfo['id']))->save(array('latitude'=>$latitude,'longitude'=>$longitude));       if($res)       {        	$this->array_return['ResultType']=self::__OK__;       		$this->array_return['Message']="地理位置更新成功";            return json($this->array_return);       }else{            $this->array_return['ResultType']=self::__ERROR__;            $this->array_return['Message']="地理位置更新失败";            return json($this->array_return);       }    }}